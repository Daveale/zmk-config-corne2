/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "keys_en_gb_extended.h"
#include "keys_uk_enhanced (2).h"
#define DEFAULT 0
#define SYMNUM  1
#define NAV     2
#define BT      3
&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <300>;
};
/ {
        behaviours {
//                lsdot: leftshift_dot {
//                    compatible = "zmk,behavior-mod-morph";
//                    label = "LS_DOT";
//                    #binding-cells = <0>;
//                    bindings = <&kp DOT>, <&kp DOT>;
//                    mods = <(MOD_LSFT)>;
//                };
//                gqt: global-quick-tap {
//                    compatible = "zmk,behavior-hold-tap";
//                    label = "GLOBAL_QUICK_TAP";
//                    #binding-cells = <2>;
//                    flavor = "tap-preferred";
//                    tapping-term-ms = <200>;
//                    quick-tap-ms = <125>;
//                    global-quick-tap;
//                    bindings = <&kp>, <&kp>;
//                };
                td0: tap_dance_0 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_0";
                    #binding-cells = <0>;
                    tapping-term-ms = <250>;
                    bindings = <&mo SYMNUM>, <&tog SYMNUM>;
                };
                as: auto_shift {
                    compatible = "zmk,behavior-hold-tap";
                    label = "AUTO_SHIFT";
                    #binding-cells = <2>;
                    tapping_term_ms = <300>;
//                    quick_tap_ms = <0>;       //added line
//                    global-quick-tap;           //added line
                    flavor = "tap-preferred";
                    bindings = <&kp>, <&kp>;
                };
            };
        conditional_layers {
                compatible = "zmk,conditional-layers";
                BT {
                if-layers = <1 2>;
                then-layer = <3>;
                };
            };
        keymap {
                compatible = "zmk,keymap";
                DEFAULT_layer {
// -----------------------------------------------------------------------------------------
// |ALT  |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L  |  U  |  Y  | - + | [ ] |
// |SHFT |  A  |  R  |  S  |  T  |  G  |   |  M  |  N  |  E  |  I  |  O  | ( ) |
// |CTRL |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H  | , ; | . : | ' " | ? ! |
//                   | RET |BSPC | NAV |   |SYMNU| SPC | TAB | 
                        bindings = <
   &mt LALT ESC     &as LS(Q) Q    &as LS(W) W   &as LS(F) F          &as LS(P) P         &as LS(B) B            &as LS(J) J    &as LS(L) L      &as LS(U) U        &as LS(Y) Y        &mt PLUS MINUS    &mt RBKT LBKT
   &mt LSHFT CAPS   &as LS(A) A    &as LS(R) R   &as LS(S) S          &as LS(T) T         &as LS(G) G            &as LS(M) M    &as LS(N) N      &as LS(E) E        &as LS(I) I        &as LS(O) O       &mt RPAR LPAR
   &mt LCTRL LG(M)  &as LS(Z) Z    &as LS(X) X   &as LS(C) C          &as LS(D) D         &as LS(V) V            &as LS(K) K    &as LS(H) H      &mt SEMI COMMA     &mt COLON DOT      &mt EN_DQT SQT    &mt EXCL QMARK
                                                 &mt LS(RET) RET      &kp BSPC            &mo NAV                &td0           &kp SPC          &mt LS(TAB) TAB
                        >;
                };
                SYMNUM_layer {
// -----------------------------------------------------------------------------------------
// |     |  `  |  £  |  ^  |  @  | { } |   | / \ |  7  |  8  |  9  | - + |     |
// |     |  ~  |  $  |  %  |  &  | < > |   |  *  |  4  |  5  |  6  |  =  |     |
// |     |  ¬  |  €  |  #  |  _  | | ¦ |   |  0  |  1  |  2  |  3  |  .  |     |
//                   |     |     |     |   |     |     |     |
                        bindings = <
   &trans    &kp EN_GRAVE  &kp EN_POUND_SIGN   &kp CARET     &kp EN_AT   &mt RBRC LBRC                       &mt EN_TILDE SLASH    &mt LC(N7) N7   &mt LC(N8) N8   &mt LC(N9) N9    &mt PLUS MINUS   &trans
   &trans    &kp EN_PIPE   &kp EN_DOLLAR       &kp PRCNT     &kp AMPS    &mt GT LT                           &kp STAR              &mt LC(N4) N4   &mt LC(N5) N5   &mt LC(N6) N6    &kp EQUAL        &trans
   &trans    &kp EN_NOT    &kp EN_EURO         &kp BSLH      &kp UNDER   &mt EN_BROKEN_BAR LS(EN_TILDE)      &mt LC(N0) N0         &mt LC(N1) N1   &mt LC(N2) N2   &mt LC(N3) N3    &kp DOT          &trans
                                               &trans        &trans      &trans                              &trans                &trans          &trans
                        >;
                };
                NAV_layer {
// -----------------------------------------------------------------------------------------
// |CLOSE|PRINT|HOME |UP   |END   |DEL  |   |Kmenu|LC+U |LC+B |LC+I | BR+  | VOL+ |
// | F6  |ALL  |LEFT |DOWN |RIGHT |COPY |   |Find |RWND |PLAY |FFWD | BR-  | VOL- |
// | F11 |UNDO |<BACK|WIN  |NEWTAB|PASTE|   |Save |WIN  |LSHFT|LCTRL|MICmut|VOLmut|
//                   |     |      |     |   |     |     |     |
                        bindings = <
   &mt LA(F4) ESC   &mt LC(P) LG(LS(S))   &mt PG_UP HOME     &kp UP           &mt PG_DN END          &kp DEL                     &mt F6 Kmenu          &kp LC(U)        &kp LC(B)  &kp LC(I)        &kp C_BRI_UP   &kp C_VOL_UP
   &trans           &kp LC(A)             &kp LEFT           &kp DOWN         &kp RIGHT              &mt LC(X) LC(C)             &mt LC(H) LC(F)       &mt C_RW C_PREV  &kp C_PP   &mt C_FF C_NEXT  &kp C_BRI_DN   &kp C_VOL_DN
   &trans           &mt LC(Y) LC(Z)       &mt LC(W) LA(LEFT) &mt F11 LC(E)    &mt LA(RIGHT) LC(T)    &mt LC(LS(V)) LC(V)         &mt LC(LS(S)) LC(S)   &mt LGUI LG(E)   &kp LSHFT  &kp LCTRL        &kp LG(LA(K))  &kp C_MUTE
                    	                                     &trans           &trans                 &trans                      &trans                &trans           &trans
                        >;
                };
                BT_layer {
// -----------------------------------------------------------------------------------------
// |BTCLR|     |     |     |     |C+A+Del|   | BT1 | BT2 | BT3 | BT4 | BT5 |     |
// |     |     |     |     |     | LOCK  |   |     |     |     |     |     |     |
// |BOOTL|RESET|     |     |     |       |   |     |     |     |     |RESET|BOOTL|
//                   |     |     |       |   |     |     |     |
                        bindings = <
   &bt BT_CLR    &none        &none    &none    &none    &kp LC(LA(DEL))        &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 5      &none 
   &none         &none        &none    &none    &none    &kp LG(L)              &none         &none         &none         &none         &none             &none
   &bootloader   &sys_reset   &none    &none    &none    &none                  &none         &none         &none         &none         &sys_reset        &bootloader
                                       &trans   &trans   &trans                 &trans        &trans        &trans
                         >;
                };
        };
};